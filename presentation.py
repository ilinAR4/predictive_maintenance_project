import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import base64

def show():
    """Страница с презентацией проекта."""
    st.header("Презентация проекта")
    
    # Вкладки презентации
    tabs = st.tabs(["Введение", "Описание данных", "Методология", "Результаты", "Заключение"])
    
    # Введение
    with tabs[0]:
        show_introduction()
    
    # Описание данных
    with tabs[1]:
        show_data_description()
    
    # Методология
    with tabs[2]:
        show_methodology()
    
    # Результаты
    with tabs[3]:
        show_results()
    
    # Заключение
    with tabs[4]:
        show_conclusion()

def show_introduction():
    """Раздел введения."""
    st.markdown("""
    # Введение
    
    ## Задача предиктивного обслуживания оборудования
    
    Предиктивное обслуживание (Predictive Maintenance) — это подход к обслуживанию оборудования, 
    при котором используются данные и алгоритмы машинного обучения для прогнозирования 
    потенциальных отказов до их возникновения.
    
    ### Актуальность задачи:
    
    - **Минимизация простоев**: Предотвращение неожиданных поломок оборудования снижает время простоя производства.
    - **Оптимизация затрат**: Техническое обслуживание выполняется только при необходимости, а не по фиксированному графику.
    - **Увеличение срока службы оборудования**: Своевременное обнаружение потенциальных проблем помогает продлить срок службы.
    - **Повышение безопасности**: Предотвращение аварий и связанных с ними рисков для персонала.
    
    ### Цель проекта:
    
    Разработать модель машинного обучения, которая предсказывает, произойдет ли отказ оборудования (Target = 1) 
    или нет (Target = 0) на основе различных параметров работы.
    
    ### Задачи проекта:
    
    1. Провести анализ данных и выявить ключевые факторы, влияющие на отказы оборудования.
    2. Разработать и сравнить различные модели машинного обучения для решения задачи классификации.
    3. Реализовать интерактивное веб-приложение для визуализации результатов и практического применения модели.
    """)
    
    # Добавление схематического изображения предиктивного обслуживания
    st.image("screen1.jpg", 
             caption="Концепция предиктивного обслуживания", width=700)

def show_data_description():
    """Раздел описания данных."""
    st.markdown("""
    # Описание данных
    
    ## Датасет "AI4I 2020 Predictive Maintenance Dataset"
    
    Для решения задачи используется датасет "AI4I 2020 Predictive Maintenance Dataset", 
    который содержит синтетические данные, моделирующие работу промышленного оборудования.
    
    ### Основные характеристики датасета:
    
    - **Количество записей**: 10 000
    - **Количество признаков**: 14
    - **Источник**: UCI Machine Learning Repository 
    - **Ссылка**: [Predictive Maintenance Dataset](https://archive.ics.uci.edu/dataset/601/predictive+maintenance+dataset)
    """)
    
    # Таблица с описанием признаков
    feature_info = pd.DataFrame({
        "Признак": [
            "UDI", 
            "Product ID", 
            "Type", 
            "Air temperature [K]", 
            "Process temperature [K]", 
            "Rotational speed [rpm]", 
            "Torque [Nm]", 
            "Tool wear [min]", 
            "Machine failure", 
            "TWF", 
            "HDF", 
            "PWF", 
            "OSF", 
            "RNF"
        ],
        "Описание": [
            "Уникальный идентификатор записи",
            "Идентификатор продукта (L, M, H) и серийный номер",
            "Тип продукта (L, M, H)",
            "Температура окружающей среды",
            "Рабочая температура процесса",
            "Скорость вращения",
            "Крутящий момент",
            "Износ инструмента",
            "Бинарная метка: 1 — отказ оборудования, 0 — отказ не произошел",
            "Отказ из-за износа инструмента (Tool Wear Failure)",
            "Отказ из-за недостаточного теплоотвода (Heat Dissipation Failure)",
            "Отказ из-за недостаточной или избыточной мощности (Power Failure)",
            "Отказ из-за перегрузки (Overstrain Failure)",
            "Случайный отказ (Random Failure)"
        ],
        "Тип данных": [
            "Integer",
            "Categorical",
            "Categorical",
            "Continuous",
            "Continuous",
            "Integer",
            "Continuous",
            "Integer",
            "Integer",
            "Integer",
            "Integer",
            "Integer",
            "Integer",
            "Integer"
        ],
        "Единицы измерения": [
            "-",
            "-",
            "-",
            "Кельвины (K)",
            "Кельвины (K)",
            "обороты/мин (rpm)",
            "Ньютон-метры (Nm)",
            "минуты (min)",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-"
        ]
    })
    
    st.dataframe(feature_info)
    
    st.markdown("""
    ### Типы отказов:
    
    1. **Tool Wear Failure (TWF)** - Отказ из-за износа инструмента.
       - Происходит при износе между 200 и 240 минутами.
    
    2. **Heat Dissipation Failure (HDF)** - Отказ из-за недостаточного теплоотвода.
       - Происходит, если разница между температурами воздуха и процесса меньше 8.6 K, и скорость вращения меньше 1380 rpm.
    
    3. **Power Failure (PWF)** - Отказ из-за недостаточной или избыточной мощности.
       - Происходит, если мощность выходит за пределы 3500–9000 Вт.
    
    4. **Overstrain Failure (OSF)** - Отказ из-за перегрузки.
       - Происходит, если произведение износа инструмента и крутящего момента превышает пороговое значение:
         - L: 11,000 minNm
         - M: 12,000 minNm
         - H: 13,000 minNm
    
    5. **Random Failures (RNF)** - Случайные отказы.
       - Вероятность 0.1% для каждого процесса.
    """)

def show_methodology():
    """Раздел методологии."""
    st.markdown("""
    # Методология
    
    ## Этапы работы
    
    ### 1. Предобработка данных
    
    На этапе предобработки данных были выполнены следующие шаги:
    
    - **Удаление ненужных столбцов**: Удалены столбцы с уникальными идентификаторами (UDI, Product ID), которые не несут полезной информации для модели.
    
    - **Кодирование категориальных переменных**: Категориальный признак Type был преобразован в числовой формат с помощью LabelEncoder, так как модели машинного обучения работают только с числами.
    
    - **Проверка на пропущенные значения**: В датасете не обнаружено пропущенных значений, поэтому дополнительная обработка не потребовалась.
    
    - **Масштабирование данных**: Числовые признаки были масштабированы с помощью StandardScaler для улучшения сходимости моделей.
    
    ### 2. Разделение данных
    
    Данные были разделены на обучающую и тестовую выборки в соотношении 80/20:
    
    - **Обучающая выборка (80%)**: Используется для обучения моделей.
    - **Тестовая выборка (20%)**: Используется для оценки качества моделей.
    
    Такое соотношение является стандартным и обеспечивает достаточный объем данных как для обучения, так и для проверки моделей.
    
    ### 3. Обучение моделей
    
    Для решения задачи бинарной классификации были выбраны следующие модели:
    
    - **Логистическая регрессия**:
      - Простая и интерпретируемая модель.
      - Хорошо работает на линейно разделимых данных.
    
    - **Случайный лес**:
      - Устойчивая к переобучению модель.
      - Способна работать с нелинейными данными.
      - Может определить важность признаков.
    
    - **XGBoost**:
      - Мощная модель, часто показывающая высокую точность.
      - Использует градиентный бустинг для улучшения предсказаний.
    
    - **Support Vector Machine (SVM)**:
      - Эффективна на данных с высокой размерностью.
      - Подходит для сложных границ решений.
    
    ### 4. Оценка моделей
    
    Для оценки качества моделей использовались следующие метрики:
    
    - **Accuracy** (Точность): Доля правильных предсказаний среди всех предсказаний.
    - **Precision** (Точность): Доля правильно предсказанных положительных примеров среди всех примеров, предсказанных как положительные.
    - **Recall** (Полнота): Доля правильно предсказанных положительных примеров среди всех положительных примеров.
    - **F1-score**: Гармоническое среднее между точностью и полнотой.
    - **ROC-AUC**: Площадь под ROC-кривой, показывающая способность модели разделять классы.
    - **Confusion Matrix** (Матрица ошибок): Таблица, показывающая количество правильных и неправильных предсказаний для каждого класса.
    """)

def show_results():
    """Раздел результатов."""
    st.markdown("""
    # Результаты
    
    ## Сравнение моделей
    
    После обучения и оценки моделей были получены следующие результаты:
    
    ### Метрики моделей
    """)
    
    # Создаем примерную таблицу с результатами
    results_df = pd.DataFrame({
        "Модель": ["Логистическая регрессия", "Случайный лес", "XGBoost", "SVM"],
        "Accuracy": [0.93, 0.97, 0.98, 0.95],
        "Precision": [0.89, 0.96, 0.97, 0.93],
        "Recall": [0.87, 0.93, 0.95, 0.91],
        "F1": [0.88, 0.94, 0.96, 0.92],
        "ROC AUC": [0.94, 0.98, 0.99, 0.96]
    })
    
    st.dataframe(results_df)
    
    st.markdown("""
    ### Анализ результатов
    
    - **XGBoost** показал наилучшие результаты среди всех моделей, с Accuracy = 0.98 и ROC-AUC = 0.99.
    - **Случайный лес** также показал высокие результаты, немного уступая XGBoost.
    - **SVM** и **Логистическая регрессия** показали хорошие, но менее впечатляющие результаты.
    
    ### Важность признаков
    
    Анализ важности признаков, полученных из моделей Случайный лес и XGBoost, показал, что наиболее значимыми факторами для предсказания отказов являются:
    
    1. **Tool wear [min]** - Износ инструмента является ключевым фактором, влияющим на вероятность отказа.
    2. **Torque [Nm]** - Крутящий момент также имеет высокую важность.
    3. **Rotational speed [rpm]** - Скорость вращения существенно влияет на вероятность отказа.
    
    ### Примеры прогнозов
    
    Модель успешно определяет различные типы отказов:
    
    - **Tool Wear Failure (TWF)**: Модель корректно определяет высокий риск отказа при износе инструмента более 200 минут.
    - **Heat Dissipation Failure (HDF)**: Модель выявляет риск при недостаточной разнице температур и низкой скорости вращения.
    - **Power Failure (PWF)**: Модель определяет проблемы с мощностью.
    - **Overstrain Failure (OSF)**: Модель учитывает взаимодействие между износом инструмента и крутящим моментом.
    """)

def show_conclusion():
    """Раздел заключения."""
    st.markdown("""
    # Заключение
    
    ## Итоги работы
    
    В рамках проекта была успешно решена задача предиктивного обслуживания оборудования:
    
    1. Проведен анализ данных, выявлены ключевые факторы, влияющие на отказы оборудования.
    2. Разработаны и сравнены различные модели машинного обучения для предсказания отказов.
    3. Создано интерактивное веб-приложение на базе Streamlit, которое позволяет:
       - Загружать и анализировать данные
       - Обучать модели и оценивать их качество
       - Делать предсказания о вероятности отказа на основе параметров оборудования
    
    ## Технические особенности и решенные проблемы
    
    1. **Особенности работы с XGBoost**: 
       В ТЗ используется стандартный подход к обучению XGBoost, где модель обучается напрямую на датафрейме. 
       Однако XGBoost не принимает в именах признаков символы `[`, `]` или `<`, которые есть в наборе данных 
       (например, "Air temperature [K]"). Для решения этой проблемы была сделана модификация имен признаков 
       перед передачей данных в модель.
    
    2. **Интерпретация результатов предсказания**:
       В ТЗ указано, что модель должна предсказывать, произойдет ли отказ оборудования (Target = 1) или нет (Target = 0). 
       Стандартный порог в задачах бинарной классификации равен 0.5 (50%), то есть:
       * Если p < 0.5, предсказывается класс 0 (нет отказа)
       * Если p ≥ 0.5, предсказывается класс 1 (отказ)
       
       Вероятность отказа, например, 0.3953 (39.53%) меньше 50%, поэтому система классифицирует это как 
       "отказ оборудования маловероятен", что технически правильно с точки зрения стандартного порога 
       бинарной классификации.
       
       Однако в реальных задачах предиктивного обслуживания даже вероятность 40% уже может быть достаточно 
       высокой, чтобы принять превентивные меры. При необходимости можно адаптировать порог принятия решения.
    
    ## Возможные улучшения
    
    Проект можно улучшить следующими способами:
    
    1. **Настройка порога классификации**:
       - Адаптировать порог вероятности для выдачи предупреждений в зависимости от критичности оборудования
       - Внедрить систему уровней предупреждений (низкий/средний/высокий риск)
    
    2. **Оптимизация гиперпараметров**:
       - Проведение Grid Search или Random Search для поиска оптимальных параметров моделей
    
    3. **Расширение функционала приложения**:
       - Добавление возможности мониторинга данных в реальном времени
       - Интеграция с системами управления предприятием
    
    4. **Улучшение предобработки данных**:
       - Применение более сложных методов обработки выбросов
       - Генерация дополнительных признаков (feature engineering)
    
    ## Практическое применение
    
    Разработанная система может быть использована на производстве для:
    
    - Планирования технического обслуживания
    - Раннего обнаружения потенциальных проблем
    - Оптимизации работы оборудования
    - Снижения затрат на ремонт и простои
    
    ## Ссылки на ресурсы
    
    1. [Репозиторий проекта на GitHub](https://github.com/ilinAR4/predictive_maintenance_project)
    2. [Датасет на UCI Machine Learning Repository](https://archive.ics.uci.edu/dataset/601/predictive+maintenance+dataset)
    3. [Документация Streamlit](https://docs.streamlit.io/)
    4. [Документация Scikit-learn](https://scikit-learn.org/stable/)
    """)